name: CI on Pull Request to Main Branch

on:
  pull_request:
    branches:
      - main

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/show_service/requirements-dev.txt

      - name: Format code
        run: |
          black services/show_service --check --diff # Mimics the check performed with pre-commit hook

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/show_service/requirements-dev.txt

      - name: Apply Pre-commit linting
        run: pre-commit run --all-files --show-diff-on-failure --verbose

      - name: Apply Ruff linting
        run: ruff check services/show_service

      - name: Apply cfn-lint linting
        run: |
          find services/show_service -type f \( \
            -path "*/template.yaml" -o -path "*/template.yml" -o \
            -path "infrastructure/*.yaml" -o -path "infrastructure/*.yml" -o \
            -path "templates/*.yaml" -o -path "templates/*.yml" \
          \) -print0 | xargs -0 cfn-lint -v

      - name: Check types with Mypy
        run: mypy services/show_service --ignore-missing-imports

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/show_service/hello_world/requirements.txt
          pip install bandit pip-audit

      - name: Run code scan
        run: bandit -r services/show_service -x services/show_service/tests

      - name: Run dependency scan
        run: pip-audit

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/show_service/hello_world/requirements.txt
          pip install -r services/show_service/tests/requirements.txt

      - name: Run unit tests
        run: |
          export PYTHONPATH=services/show_service
          pytest -v

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/show_service/hello_world/requirements.txt

      - name: Ensure that AWS SAM CLI is installed
        run: sam --version || echo "SAM not installed"

      - name: Validate template
        run: sam validate -t services/show_service/template.yaml

      - name: Build artifact
        run: sam build --use-container -t services/show_service/template.yaml

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: sam-build-artifact
          path: .aws-sam/build

  deploy:
    runs-on: ubuntu-latest
    needs: [format, lint, security-scan, unit-test, build]
    environment: Development
    steps:
      - name: Checkout code # So samconfig.toml can be consulted for sam deploy
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: sam-build-artifact

      - name: Configure AWS credentials # Use OIDC instead when doing this for real
        uses: aws-actions/configure-aws-credentials@v4
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-west-2

      - name: Deploy to AWS
        run: |
          cd services/show_service
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset

  e2e-test:
    runs-on: ubuntu-latest
    needs: deploy
    environment: Development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - run: |
          chmod +x ./services/show_service/tests/e2e/e2e_tests.sh
          ./services/show_service/tests/e2e/e2e_tests.sh
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          AWS_REGION: us-west-2 # AWS_REGION uses snake case because that's shell convention, whereas AWS-REGION is used in deploy job because that's what the GitHub Action uses
