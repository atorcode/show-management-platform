name: CI on Push for Feature Branch

on:
  push:
    branches-ignore:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed services
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            show_service:
              - "services/show_service/**"
            people_service:
              - "services/people_service/**"
            # Add more services here as needed

      - name: Create JSON array of changed services
        id: set
        run: |
          changed=()
          if [[ "${{ steps.filter.outputs.show_service }}" == "true" ]]; then
            changed+=("show_service")
          fi
          if [[ "${{ steps.filter.outputs.people_service }}" == "true" ]]; then
            changed+=("people_service")
          fi
          echo "Changed services: ${changed[@]}"
          # Create a new empty JSON array and pass in each member of the changed array as positional arguments. Save the resulting JSON array as the services output in the GitHub Actions environment.
          echo "services=$(jq -c -n '$ARGS.positional' --args "${changed[@]}")" >> $GITHUB_OUTPUT

  format:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Debug matrix services
        run: |
          echo "Matrix services: ${{ fromJson(needs.detect-changes.outputs.services) }}"

      - name: Install dependencies
        run: |
          pip install -r services/${{ matrix.service }}/requirements-dev.txt

      - name: Format code
        run: |
          black services/${{ matrix.service }} --check --diff # Mimics the check performed with pre-commit hook

  lint:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/${{ matrix.service }}/requirements-dev.txt

      - name: Apply Pre-commit linting
        run: pre-commit run --all-files --show-diff-on-failure --verbose

      - name: Apply Ruff linting
        run: ruff check services/${{ matrix.service }}

      - name: Apply cfn-lint linting
        run: |
          find services/${{ matrix.service }} -type f \( \
            -path "*/template.yaml" -o -path "*/template.yml" -o \
            -path "infrastructure/*.yaml" -o -path "infrastructure/*.yml" -o \
            -path "templates/*.yaml" -o -path "templates/*.yml" \
          \) -print0 | xargs -0 cfn-lint -v

      - name: Check types with Mypy
        run: mypy services/${{ matrix.service }} --ignore-missing-imports

  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/${{ matrix.service }}/hello_world/requirements.txt
          pip install bandit pip-audit

      - name: Run code scan
        run: bandit -r services/${{ matrix.service }} -x services/${{ matrix.service }}/tests

      - name: Run dependency scan
        run: pip-audit

  test:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/${{ matrix.service }}/hello_world/requirements.txt
          pip install -r services/${{ matrix.service }}/tests/requirements.txt

      - name: Run unit tests
        run: |
          export PYTHONPATH=services/${{ matrix.service }}
          pytest -v

  build:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r services/${{ matrix.service }}/hello_world/requirements.txt

      - name: Ensure that AWS SAM CLI is installed
        run: sam --version || echo "SAM not installed"

      - name: Validate template
        run: sam validate -t services/${{ matrix.service }}/template.yaml

      - name: Build package # Not uploading the artifact, just testing if build passes
        run: sam build --use-container -t services/${{ matrix.service }}/template.yaml
